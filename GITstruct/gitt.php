<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8" >
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>БАЗА ПО GIT</title>
    <?php
        require("../components/nav1.php");
    ?>
    <header>
        <h1>БАЗА ПО GIT</h1>
    </header>
    <main>
        <h2>ФИШКИ</h2>
        <p><b>flyokyla.github.io</b>/<u>репозиторий</u></p>
        
        <h2>ЗАУМНЫЕ СЛОВЕЧКИ</h2>
        <p> <b>форк (fork)</b> - копия репозитория - внешняя ветка гит-репозитория </p>
        <p><b>Обновиться из апстрима</b> - обновить свою локальную версию форка до последней версии основного репозитория, от которого был сделан форк</p>
        <p><b>обновиться из ориджина</b> - обновить свою локальную версию репозитория до последней удаленной версии основного репозитория</p>
        <p><b>ветка (branch)</b> - параллельная версия репозитория, при этом она включена в этот репозиторий, но не влияет на главную версию, поэтому в ней можно спокойно работать и и позже объединить с основной версией</p>
        <p><b>мастер (master)</b> - главная / основная ветка</p>
        <p><b>комит (commit)</b> - фиксация изменений</p>
        <p> <b> пул (pull) </b> - получение последних изменений с удаленного сервера репозитория </p>
        <p><b>пуш (push)</b> - отправка всех неотправленных комитов на удаленный сервер репозитория</p>
        <p><b>пулреквест (pull request)</b> - запрос на слияние форка с мастером - может быть принят или отклонен владельцем</p>
        <p><b>мёрдж (merge)</b> - слияние изменений из какой-любой ветки репозиторрия с любой веткой этого же репозитория </p>
        <p><b>кодревью</b> - проверка кода на определнные требования, задачи и внешнему виду</p>

        <h2>КОМАНДЫ</h2>
        <p><b>pull</b> (- тянуть) - получение последней версии проекта</p>
        <p><b>push</b>(- толкать) - отправка изменений в облако</p>
        <p>git commit <b>--amend</b>(- исправить последний комит) -m "сообщение" / --no-edit(- чтобы не менять сообщение коммита) - закомитить</p>
        <p>git commit <b>-a</b> -m "сообщение" - закомитить сразу без add те файлы которые были ранее добавлены</p>
        <p>git <b>log</b> параметры:-1(-только последний)/-2(- только 2 последних) --oneline(сгруппированные комиты) --all(- всего) --graph(- покажет графом) - покажет коммиты</p>
        <p>git <b>show</b> хэш-коммиат - покажет внесенные после коммита изменения</p>
        <p>git <b>chekout</b> <u>файл</u> / <u>ничего чтобы полностью откатиться</u> - откатиться до последнего комита файла</p>
        <p>git <b>checkout</b> <u>хэш-коммита</u> <i>файл</i>- откатиться до определенного коммита файла</p>
        <p>git <b>checkout -b указатель хэш-комита</b>- создать указатель на комит</p>
        <p>git <b>reset HEAD</b> файл - после git add, добавит для комита все файлы кроме указанного</p>
        <p>git <b>rm</b> <u>--cached</u>(- удалить из директории, но не из комита) файл - удалить файл из последнего коммита и из папки тоже</p>
        <p>git <b>merge</b> указатель-ветки -m "сообщение" - слияние двух веток</p>
        <p>git push origin <b>неправильное-название-ветки</b>:<u>правильное</u> - создаст новую ветку на основе старой в гитхабе</p>
        <p>git push origin :<b>ненужная ветка</b> - удалить ветку из гитхаба</p>
        <p>git branch <b>-m</b> ветка - переименовать ветку</p>
        <p>git <b>fetch</b> origin - загрузить комиты и ветки с гитхаба</p>
        <p>git <b>checkout -b</b> ветка-с-гитхаба origin/ветка-с-гитхаба</p>
        <p>git branch <b>--set-upstream-to=origin/ветка - связать удаленную и локальную ветку</b></p>
        <p>git branch <b>-vv</b> - очень подробно про ветки</p>
        <h2>ПОСЛЕДОВАТЕЛЬНОСТЬ</h2>
        <p>1) git init - преврщает папку в git директорию</p>
        <p>2) git status - статус гита</p>
        <p>3) git add файл - добавить отслеживаемый файл ("." - добавит все)</p>
        <p>4) git commit -m "сообщение"</p>
        <p>5) git diff - показать изменения</p>
        <p>6) git add файл</p>
    </main>
</body>
</html>